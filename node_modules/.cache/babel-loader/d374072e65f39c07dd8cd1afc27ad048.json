{"ast":null,"code":"import capString from \"../Presenter/capString\";\nimport { SaveToFirebase, RemoveFromDatabase, UpdateFirebase } from '../firebaseFunc';\n\nclass MolModel {\n  constructor(ingredientList = [], currentingredient = undefined) {\n    this.subscribers = [];\n    this.recipeList = [];\n    this.ingredientList = ingredientList;\n    this.currentingredientListName = \"\";\n    this.currentingredient = currentingredient;\n    this.currentRecipeName = \"\";\n    this.currentRecipeList = [];\n    this.recipeKeys = [];\n    this.reNameList = [];\n    this.fixedName = \"\";\n    this.userID = undefined;\n  }\n\n  emptyList() {\n    this.recipeList = []; //return this.recipeList;\n  }\n  /********** USER_ID **********/\n\n\n  setUserID(id) {\n    this.userID = id;\n    this.notifyObservers();\n  }\n\n  getUserID() {\n    return this.userID;\n  }\n  /********** CURRENT_ingredient ********/\n\n\n  setCurrentingredient(obj) {\n    this.currentingredient = obj;\n    this.notifyObservers();\n  }\n\n  getCurrentingredient() {\n    // Current ingredient\n    return this.currentingredient;\n  }\n\n  setCurrentIngredientList(recipe) {\n    this.ingredientList = recipe;\n    this.notifyObservers();\n  }\n\n  setCurrentIngredientListName(name) {\n    this.currentingredientListName = name;\n    this.notifyObservers();\n  }\n\n  getCurrentIngredientListName() {\n    return this.currentingredientListName;\n  }\n  /********** MOL_OBJECT **********/\n\n\n  setIngredientObject(ing, quantity) {\n    // initialize ingredient object\n    var IngredientObj = {\n      name: \"\",\n      fat: null,\n      carbs: null,\n      fiber: null,\n      protein: null,\n      amount: null\n    };\n    IngredientObj.name = ing.label; // efter den här ändras elementet i listan till objektet\n\n    IngredientObj.fat = ing.nutrients.FAT;\n    IngredientObj.carbs = ing.nutrients.CHOCDF;\n    IngredientObj.fiber = ing.nutrients.FIBTG;\n    IngredientObj.protein = ing.nutrients.PROCNT;\n    IngredientObj.amount = parseInt(quantity !== \"\" ? quantity : \"100\");\n    this.setCurrentingredient(IngredientObj);\n    return IngredientObj;\n  }\n  /********** ingredient_LIST **********/\n\n\n  nameYouringredientList(name) {\n    const customizedMol = this.getCurrentingredient();\n    customizedMol.id = name;\n    this.addToingredientList(customizedMol);\n  }\n\n  getingredientList() {\n    // more than one ingredient object\n    return [...this.ingredientList];\n  }\n\n  sumingredientList() {\n    //Used to sum up the ingredients values for the graph presentation\n    var sumObj = {\n      name: \"\",\n      fat: null,\n      carbs: null,\n      fiber: null,\n      protein: null\n    };\n    const molList = this.getingredientList();\n    molList.forEach(element => ( // sums all elements from molecule list\n    sumObj.name += \" + \" + capString(element.name), // to capitalize first letter in each ing\n    sumObj.fat += element.fat * (element.amount / 100), sumObj.carbs += element.carbs * (element.amount / 100), sumObj.fiber += element.fiber * (element.amount / 100), sumObj.protein += element.protein * (element.amount / 100)));\n    sumObj.name = sumObj.name.substring(3); // used to remove the first plus sign\n\n    return sumObj;\n  }\n\n  emptyRecipeList() {\n    this.recipeList = [];\n  }\n\n  sumList(ingredientList) {\n    //Used to sum up the ingredients values for the graph presentation\n    var sumObj = {\n      name: \"\",\n      fat: null,\n      carbs: null,\n      fiber: null,\n      protein: null\n    };\n    ingredientList.forEach(element => ( // sums all elements from molecule list\n    sumObj.name += \" + \" + capString(element.name), // to capitalize first letter in each ing\n    sumObj.fat += element.fat * (element.amount / 100), sumObj.carbs += element.carbs * (element.amount / 100), sumObj.fiber += element.fiber * (element.amount / 100), sumObj.protein += element.protein * (element.amount / 100)));\n    sumObj.name = sumObj.name.substring(3); // used to remove the first plus sign\n\n    return sumObj;\n  }\n\n  addToingredientList(obj) {\n    //console.log(this.getaList())\n    if (!this.ingredientListHas(obj)) {\n      alert(\"Ingredient is already in graph\");\n    } else {\n      this.ingredientList = [obj, ...this.ingredientList];\n    } // this.ingredientList.push(obj);\n    // console.log(this.getingredientList())\n\n\n    this.notifyObservers();\n  }\n\n  alreadySearched(searchResults) {\n    var check = false;\n\n    if (this.currentingredient !== undefined) {\n      if (this.currentingredient.name === searchResults.label) {\n        check = true;\n      }\n    }\n\n    return check;\n  }\n\n  ingredientListHas(item) {\n    let check = true;\n    var index = 0;\n\n    while (index < this.ingredientList.length) {\n      if (item.name === this.ingredientList[index].name) {\n        check = false;\n        break;\n      }\n\n      index++;\n    }\n\n    return check;\n  }\n\n  removeFromList(name) {\n    this.ingredientList = this.ingredientList.filter(function (remove) {\n      return remove.name !== name;\n    });\n    this.notifyObservers();\n  }\n  /********** RECIPE_LIST **********/\n\n\n  removeFromRecipeList(name) {\n    const recipeID = this.recipeKeys.filter(elem => elem.name === name);\n    this.recipeList = this.recipeList.filter(elem => elem.name !== name);\n\n    if (recipeID.length) {\n      for (var i = 0; i < this.recipeKeys.length; i++) if (this.recipeKeys[i].name === name) {\n        this.recipeKeys.splice(i, 1);\n      }\n\n      RemoveFromDatabase(recipeID[0].key);\n      console.log(\"After removing: \", this.recipeKeys);\n    } else {\n      alert(\"Recipe does not exist\");\n    } // console.log(this.recipeList);\n    // console.log(this.recipeList);\n\n\n    this.notifyObservers();\n  }\n\n  addToNameList(reName) {\n    this.reNameList = [reName, ...this.reNameList];\n    this.notifyObservers();\n  }\n\n  nameYourRecipeList(name) {\n    // console.log(\"nameYourRecipeList is running...\");\n    this.currentRecipeName = name;\n    const recipe = {\n      name: name,\n      ingredientList: this.getingredientList()\n    };\n    this.addToRecipeList(recipe);\n  } // addToRecipeList(recipe) {\n  //     const key = SaveToFirebase(recipe, this.getUserID());\n  //     const recipeKey = {\n  //         key: key,\n  //         name: recipe.name\n  //     };\n  //     this.addToRecipeKeys(recipeKey);\n  //     this.notifyObservers();  \n  // }\n\n\n  addToRecipeList(recipe) {\n    if (!this.recipeListHas(recipe.name)) {\n      const recipeName = this.modiName(recipe.name);\n      recipe.name = recipeName;\n      const key = SaveToFirebase(recipe);\n      const recipeKey = {\n        key: key,\n        name: recipeName\n      };\n      console.log(recipe);\n      this.addToNameList(recipeName);\n      this.addToRecipeKeys(recipeKey);\n      alert(\"The name is already taken, '_1' adds to the name\");\n      this.notifyObservers();\n    } else {\n      const key = SaveToFirebase(recipe);\n      const recipeKey = {\n        key: key,\n        name: recipe.name\n      };\n      this.addToNameList(recipe.name);\n      this.addToRecipeKeys(recipeKey);\n      this.notifyObservers();\n    }\n  }\n\n  recipeListHas(recipeName) {\n    let check = true;\n\n    for (var i = 0; i < this.recipeKeys.length; i++) {\n      if (recipeName === this.recipeKeys[i].name) {\n        check = false;\n        break;\n      }\n    }\n\n    return check;\n  }\n\n  modiName(name) {\n    const modName = name;\n    this.fixedName = modName + \"_1\";\n    console.log(this.fixedName);\n    return this.fixedName;\n  }\n\n  setRecipeKeys(keyList) {\n    this.recipeKeys = keyList;\n  }\n\n  addToRecipeKeys(keyObject) {\n    // console.log(\"Adding to recipeKeys\");\n    this.recipeKeys = [keyObject, ...this.recipeKeys]; //console.log(this.recipeKeys);\n  }\n\n  getRecipeList() {\n    // more than one molobject merged together\n    //return this.recipeList;\n    return [...this.recipeList];\n  }\n\n  setRecipeList(recipeList) {\n    this.recipeList = recipeList;\n    this.notifyObservers();\n  }\n  /********** CLEAR_ARRAY **********/\n\n\n  clearList(i) {\n    if (i !== null) {\n      this.currentingredient = undefined; //this.setMolObject(null);\n      //this.recipeList.length = 0;\n      //const molList = this.moleculeList;\n\n      this.ingredientList.splice(0, this.ingredientList.length);\n      this.currentRecipeName = \"\"; // this.recipeList.splice(0,this.recipeList.length);\n    }\n  }\n  /********** MODIFY_RECIPE **********/\n\n\n  setCurrentRecipeName(name) {\n    this.currentRecipeName = name;\n    this.notifyObservers();\n  }\n\n  getCurrentRecipeName() {\n    return this.currentRecipeName;\n  }\n\n  checkRecipe(newName) {\n    const recipeOldName = this.getCurrentRecipeName();\n    console.log(recipeOldName);\n\n    if (newName === recipeOldName) {\n      const recipeID = this.recipeKeys.filter(elem => elem.name === newName);\n\n      if (recipeID.length) {\n        console.log(\"case 1: Update recipe with same name\");\n        UpdateFirebase(recipeID[0].key, recipeID[0].name, this.getingredientList());\n        this.setCurrentRecipeName(undefined);\n      }\n    } else {\n      const recipeID = this.recipeKeys.filter(elem => elem.name === recipeOldName);\n\n      if (recipeID.length) {\n        console.log(\"case 3: Update recipe with new name\");\n        this.nameYourRecipeList(newName);\n        RemoveFromDatabase(recipeID[0].key);\n\n        for (var i = 0; i < this.recipeKeys.length; i++) if (this.recipeKeys[i].name === recipeOldName) {\n          this.recipeKeys.splice(i, 1);\n        }\n\n        this.setCurrentRecipeName(undefined);\n        console.log(\"After case 3: \", this.recipeKeys);\n      } else {\n        console.log(\"case 4: Set new recipe\");\n        this.nameYourRecipeList(newName);\n      }\n    } //console.log(this.recipeList);\n\n\n    this.notifyObservers();\n  }\n  /********** OBSERVER **********/\n\n\n  addObserver(obs) {\n    this.subscribers = this.subscribers.concat(obs);\n    return () => this.removeObserver(obs);\n  }\n\n  notifyObservers() {\n    this.subscribers.forEach(callback => {\n      try {\n        callback();\n      } catch (err) {\n        console.error(\"Error \", err, callback);\n      }\n    });\n  }\n\n  removeObserver(obs) {\n    this.subscribers = this.subscribers.filter(o => o !== obs);\n  }\n\n}\n\nexport default MolModel;","map":{"version":3,"sources":["C:/Users/acequ/Documents/DH2642/iprog_project/src/Model/molmodel.js"],"names":["capString","SaveToFirebase","RemoveFromDatabase","UpdateFirebase","MolModel","constructor","ingredientList","currentingredient","undefined","subscribers","recipeList","currentingredientListName","currentRecipeName","currentRecipeList","recipeKeys","reNameList","fixedName","userID","emptyList","setUserID","id","notifyObservers","getUserID","setCurrentingredient","obj","getCurrentingredient","setCurrentIngredientList","recipe","setCurrentIngredientListName","name","getCurrentIngredientListName","setIngredientObject","ing","quantity","IngredientObj","fat","carbs","fiber","protein","amount","label","nutrients","FAT","CHOCDF","FIBTG","PROCNT","parseInt","nameYouringredientList","customizedMol","addToingredientList","getingredientList","sumingredientList","sumObj","molList","forEach","element","substring","emptyRecipeList","sumList","ingredientListHas","alert","alreadySearched","searchResults","check","item","index","length","removeFromList","filter","remove","removeFromRecipeList","recipeID","elem","i","splice","key","console","log","addToNameList","reName","nameYourRecipeList","addToRecipeList","recipeListHas","recipeName","modiName","recipeKey","addToRecipeKeys","modName","setRecipeKeys","keyList","keyObject","getRecipeList","setRecipeList","clearList","setCurrentRecipeName","getCurrentRecipeName","checkRecipe","newName","recipeOldName","addObserver","obs","concat","removeObserver","callback","err","error","o"],"mappings":"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","sourcesContent":["import capString from \"../Presenter/capString\"\r\nimport {SaveToFirebase, RemoveFromDatabase, UpdateFirebase} from '../firebaseFunc';\r\n\r\nclass MolModel{\r\n    constructor(ingredientList = [], currentingredient = undefined){\r\n        this.subscribers = [];\r\n        this.recipeList = [];\r\n        this.ingredientList = ingredientList;  \r\n        this.currentingredientListName = \"\";\r\n        this.currentingredient = currentingredient;\r\n        this.currentRecipeName = \"\";\r\n        this.currentRecipeList = [];\r\n        this.recipeKeys = [];\r\n        this.reNameList = [];\r\n        this.fixedName = \"\";\r\n        this.userID = undefined;\r\n    }\r\n\r\n    emptyList(){\r\n        this.recipeList = [];\r\n        //return this.recipeList;\r\n    }\r\n\r\n    /********** USER_ID **********/\r\n    setUserID(id){\r\n        this.userID = id;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    getUserID(){\r\n        return this.userID;\r\n    }\r\n\r\n    /********** CURRENT_ingredient ********/\r\n    setCurrentingredient(obj) {\r\n        this.currentingredient = obj; \r\n        this.notifyObservers();\r\n    }\r\n\r\n    getCurrentingredient() {  // Current ingredient\r\n        return this.currentingredient; \r\n    }\r\n\r\n    setCurrentIngredientList(recipe) {\r\n        this.ingredientList = recipe;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    setCurrentIngredientListName(name) {\r\n        this.currentingredientListName = name;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    getCurrentIngredientListName() {\r\n        return this.currentingredientListName;\r\n    }\r\n\r\n    /********** MOL_OBJECT **********/\r\n    setIngredientObject(ing, quantity){  // initialize ingredient object\r\n        var IngredientObj ={\r\n            name : \"\", \r\n            fat : null,\r\n            carbs : null,\r\n            fiber : null,\r\n            protein : null,\r\n            amount : null\r\n        }        \r\n\r\n        IngredientObj.name = ing.label; // efter den här ändras elementet i listan till objektet\r\n        IngredientObj.fat = ing.nutrients.FAT;\r\n        IngredientObj.carbs = ing.nutrients.CHOCDF;\r\n        IngredientObj.fiber = ing.nutrients.FIBTG;\r\n        IngredientObj.protein = ing.nutrients.PROCNT;\r\n\r\n        \r\n        IngredientObj.amount = parseInt(quantity !== \"\" ? quantity : \"100\");    \r\n        \r\n        \r\n        this.setCurrentingredient(IngredientObj);\r\n        return IngredientObj;\r\n    }\r\n    \r\n    /********** ingredient_LIST **********/\r\n    nameYouringredientList(name) {\r\n        const customizedMol = this.getCurrentingredient();\r\n        customizedMol.id=name;\r\n        this.addToingredientList(customizedMol);\r\n    }\r\n\r\n    getingredientList() { // more than one ingredient object\r\n        return [...this.ingredientList];\r\n    }\r\n\r\n    sumingredientList() {   //Used to sum up the ingredients values for the graph presentation\r\n        var sumObj ={\r\n            name : \"\", \r\n            fat : null,\r\n            carbs : null,\r\n            fiber : null,\r\n            protein : null\r\n        }\r\n        const molList = this.getingredientList() \r\n        molList.forEach(element =>  // sums all elements from molecule list\r\n            (sumObj.name += \" + \" + capString(element.name), // to capitalize first letter in each ing\r\n            sumObj.fat += element.fat*(element.amount/100),\r\n            sumObj.carbs += element.carbs*(element.amount/100), \r\n            sumObj.fiber += element.fiber*(element.amount/100), \r\n            sumObj.protein += element.protein*(element.amount/100))\r\n            )\r\n            sumObj.name = sumObj.name.substring(3); // used to remove the first plus sign\r\n        return sumObj; \r\n    }\r\n\r\n    emptyRecipeList() {\r\n        this.recipeList = []\r\n    }\r\n\r\n    sumList(ingredientList) {   //Used to sum up the ingredients values for the graph presentation\r\n        var sumObj ={\r\n            name : \"\", \r\n            fat : null,\r\n            carbs : null,\r\n            fiber : null,\r\n            protein : null\r\n        }\r\n        \r\n        ingredientList.forEach(element =>  // sums all elements from molecule list\r\n            (sumObj.name += \" + \" + capString(element.name), // to capitalize first letter in each ing\r\n            sumObj.fat += element.fat*(element.amount/100),\r\n            sumObj.carbs += element.carbs*(element.amount/100), \r\n            sumObj.fiber += element.fiber*(element.amount/100), \r\n            sumObj.protein += element.protein*(element.amount/100))\r\n            )\r\n            sumObj.name = sumObj.name.substring(3); // used to remove the first plus sign\r\n        return sumObj; \r\n    }\r\n\r\n    addToingredientList(obj) {\r\n        //console.log(this.getaList())\r\n        if(!this.ingredientListHas(obj)){\r\n            alert(\"Ingredient is already in graph\");\r\n        }\r\n        else{\r\n            this.ingredientList = [obj, ...this.ingredientList];\r\n        }\r\n        \r\n       \r\n        // this.ingredientList.push(obj);\r\n        // console.log(this.getingredientList())\r\n        this.notifyObservers(); \r\n    }\r\n\r\n    alreadySearched(searchResults){\r\n        var check = false;\r\n        if (this.currentingredient !== undefined){            \r\n            if(this.currentingredient.name === searchResults.label) {\r\n                check = true;\r\n            }\r\n        }\r\n        return check\r\n    }\r\n\r\n    \r\n    ingredientListHas(item) {\r\n        let check = true;\r\n\t\tvar index=0;\r\n\t\twhile(index<this.ingredientList.length)\r\n\t\t{\r\n\t\t\tif(item.name === this.ingredientList[index].name)\r\n\t\t\t{\r\n\t\t\t\tcheck=false; \r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tindex++;\r\n\t\t}\r\n\t\treturn check;\r\n    }\r\n\r\n    removeFromList(name){\r\n        this.ingredientList = this.ingredientList.filter(function(remove){return remove.name!==name;});\r\n        this.notifyObservers();\r\n    }\r\n\r\n    /********** RECIPE_LIST **********/\r\n    removeFromRecipeList(name) {\r\n        const recipeID = this.recipeKeys.filter( (elem) => elem.name === name);\r\n\r\n        this.recipeList = this.recipeList.filter( (elem) => elem.name !== name);\r\n\r\n        if (recipeID.length) {\r\n            for(var i = 0; i < this.recipeKeys.length; i++)\r\n            if(this.recipeKeys[i].name === name) { \r\n                this.recipeKeys.splice(i,1)\r\n            }\r\n\r\n            RemoveFromDatabase(recipeID[0].key);\r\n\r\n            console.log(\"After removing: \",this.recipeKeys)\r\n        } else {\r\n            alert(\"Recipe does not exist\");\r\n        }\r\n        \r\n        // console.log(this.recipeList);\r\n        // console.log(this.recipeList);\r\n\r\n        this.notifyObservers();\r\n    }\r\n    addToNameList(reName){\r\n        this.reNameList = [reName,...this.reNameList];\r\n        this.notifyObservers();\r\n    }\r\n\r\n    nameYourRecipeList(name) \r\n    {\r\n        // console.log(\"nameYourRecipeList is running...\");\r\n        this.currentRecipeName = name;\r\n        const recipe = {\r\n            name: name,\r\n            ingredientList: this.getingredientList()\r\n        }\r\n\r\n        this.addToRecipeList(recipe);\r\n    }\r\n\r\n    // addToRecipeList(recipe) {\r\n    //     const key = SaveToFirebase(recipe, this.getUserID());\r\n\r\n    //     const recipeKey = {\r\n    //         key: key,\r\n    //         name: recipe.name\r\n    //     };\r\n\r\n    //     this.addToRecipeKeys(recipeKey);\r\n        \r\n    //     this.notifyObservers();  \r\n    // }\r\n\r\n    addToRecipeList(recipe) {\r\n        if(!this.recipeListHas(recipe.name)){\r\n            \r\n            const recipeName = this.modiName(recipe.name);\r\n            recipe.name = recipeName;\r\n            const key = SaveToFirebase(recipe);\r\n\r\n            const recipeKey = {\r\n                key: key,\r\n                name: recipeName\r\n            };\r\n\r\n            console.log(recipe)\r\n\r\n            this.addToNameList(recipeName);\r\n            this.addToRecipeKeys(recipeKey);\r\n\r\n            alert(\"The name is already taken, '_1' adds to the name\");\r\n            this.notifyObservers();\r\n        }\r\n        else {\r\n            const key = SaveToFirebase(recipe);\r\n\r\n            const recipeKey = {\r\n                key: key,\r\n                name: recipe.name\r\n            };\r\n            \r\n            this.addToNameList(recipe.name);\r\n            this.addToRecipeKeys(recipeKey);\r\n            this.notifyObservers();\r\n        }\r\n    }\r\n\r\n    recipeListHas(recipeName) {\r\n        let check = true;\r\n\t\tfor(var i = 0; i < this.recipeKeys.length; i++)\r\n\t\t{\r\n\t\t\tif(recipeName === this.recipeKeys[i].name)\r\n\t\t\t{\r\n\t\t\t\tcheck=false; \r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn check;\r\n    }\r\n\r\n    modiName(name){\r\n        const modName = name;\r\n        this.fixedName = modName + \"_1\";\r\n        console.log(this.fixedName);\r\n        return this.fixedName;\r\n    }\r\n\r\n    setRecipeKeys(keyList) {\r\n        this.recipeKeys = keyList;\r\n    }\r\n\r\n    addToRecipeKeys(keyObject) {\r\n        // console.log(\"Adding to recipeKeys\");\r\n        this.recipeKeys = [keyObject, ...this.recipeKeys];\r\n        //console.log(this.recipeKeys);\r\n    }\r\n\r\n    getRecipeList(){ // more than one molobject merged together\r\n        //return this.recipeList;\r\n        \r\n        return [...this.recipeList];\r\n    }\r\n\r\n    setRecipeList(recipeList) {\r\n        this.recipeList = recipeList;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    /********** CLEAR_ARRAY **********/\r\n    clearList(i) {\r\n        if(i!==null){\r\n            this.currentingredient = undefined;\r\n            //this.setMolObject(null);\r\n            //this.recipeList.length = 0;\r\n            //const molList = this.moleculeList;\r\n            this.ingredientList.splice(0,this.ingredientList.length);\r\n            this.currentRecipeName = \"\";\r\n            // this.recipeList.splice(0,this.recipeList.length);\r\n        }\r\n    }\r\n\r\n    /********** MODIFY_RECIPE **********/\r\n    setCurrentRecipeName(name){\r\n        this.currentRecipeName = name;\r\n        this.notifyObservers();\r\n    }\r\n    getCurrentRecipeName(){\r\n        return this.currentRecipeName;\r\n    }\r\n\r\n    checkRecipe(newName){\r\n        const recipeOldName = this.getCurrentRecipeName();\r\n        console.log(recipeOldName);\r\n\r\n        if(newName === recipeOldName)\r\n        {\r\n            const recipeID = this.recipeKeys.filter( (elem) => elem.name === newName);\r\n            \r\n            if (recipeID.length) {\r\n                console.log(\"case 1: Update recipe with same name\");\r\n                UpdateFirebase(recipeID[0].key, recipeID[0].name, this.getingredientList());\r\n                this.setCurrentRecipeName(undefined);\r\n            }\r\n        }\r\n        else {\r\n            const recipeID = this.recipeKeys.filter( (elem) => elem.name === recipeOldName);\r\n            if (recipeID.length) {\r\n                console.log(\"case 3: Update recipe with new name\");\r\n                this.nameYourRecipeList(newName);\r\n                RemoveFromDatabase(recipeID[0].key);\r\n            \r\n                for(var i = 0; i < this.recipeKeys.length; i++)\r\n                if(this.recipeKeys[i].name === recipeOldName) { \r\n                    this.recipeKeys.splice(i,1)\r\n                }\r\n\r\n                this.setCurrentRecipeName(undefined);\r\n                console.log(\"After case 3: \", this.recipeKeys);\r\n            }\r\n            else{\r\n                console.log(\"case 4: Set new recipe\");\r\n                this.nameYourRecipeList(newName);\r\n            }\r\n        }\r\n        //console.log(this.recipeList);\r\n\r\n        this.notifyObservers();\r\n    }\r\n\r\n\r\n    /********** OBSERVER **********/\r\n    addObserver(obs) { \r\n        this.subscribers = this.subscribers.concat(obs);  \r\n        return ()=>this.removeObserver(obs);                             \r\n        }\r\n\r\n    notifyObservers(){\r\n        this.subscribers.forEach((callback)=> {\r\n            try{callback()} catch(err){\r\n                console.error(\"Error \", err, callback);}\r\n        });                                                      \r\n    }\r\n    removeObserver(obs){\r\n        this.subscribers = this.subscribers.filter(o=> o !== obs); \r\n    }\r\n}\r\n\r\nexport default MolModel;"]},"metadata":{},"sourceType":"module"}